// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: post/post.proto

package post

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PostService_CreatePost_FullMethodName               = "/post.PostService/CreatePost"
	PostService_UpdatePost_FullMethodName               = "/post.PostService/UpdatePost"
	PostService_GetPostByID_FullMethodName              = "/post.PostService/GetPostByID"
	PostService_ListPosts_FullMethodName                = "/post.PostService/ListPosts"
	PostService_DeletePost_FullMethodName               = "/post.PostService/DeletePost"
	PostService_AddImageToPost_FullMethodName           = "/post.PostService/AddImageToPost"
	PostService_RemoveImageFromPost_FullMethodName      = "/post.PostService/RemoveImageFromPost"
	PostService_GetPostByCountry_FullMethodName         = "/post.PostService/GetPostByCountry"
	PostService_GetUserRecommendation_FullMethodName    = "/post.PostService/GetUserRecommendation"
	PostService_GetPostsByUsername_FullMethodName       = "/post.PostService/GetPostsByUsername"
	PostService_GetTrendsPost_FullMethodName            = "/post.PostService/GetTrendsPost"
	PostService_SearchPost_FullMethodName               = "/post.PostService/SearchPost"
	PostService_AddLikePost_FullMethodName              = "/post.PostService/AddLikePost"
	PostService_DeleteLikePost_FullMethodName           = "/post.PostService/DeleteLikePost"
	PostService_AddLikeComment_FullMethodName           = "/post.PostService/AddLikeComment"
	PostService_DeleteLikeComment_FullMethodName        = "/post.PostService/DeleteLikeComment"
	PostService_GetPostLikeCount_FullMethodName         = "/post.PostService/GetPostLikeCount"
	PostService_GetMostLikedComment_FullMethodName      = "/post.PostService/GetMostLikedComment"
	PostService_GetUsersWhichLikePost_FullMethodName    = "/post.PostService/GetUsersWhichLikePost"
	PostService_GetUsersWhichLikeComment_FullMethodName = "/post.PostService/GetUsersWhichLikeComment"
	PostService_CreateComment_FullMethodName            = "/post.PostService/CreateComment"
	PostService_UpdateComment_FullMethodName            = "/post.PostService/UpdateComment"
	PostService_GetCommentByID_FullMethodName           = "/post.PostService/GetCommentByID"
	PostService_GetCommentByUsername_FullMethodName     = "/post.PostService/GetCommentByUsername"
	PostService_ListComments_FullMethodName             = "/post.PostService/ListComments"
	PostService_DeleteComment_FullMethodName            = "/post.PostService/DeleteComment"
	PostService_GetCommentByPostID_FullMethodName       = "/post.PostService/GetCommentByPostID"
	PostService_GetAllUserComments_FullMethodName       = "/post.PostService/GetAllUserComments"
	PostService_GetMostlikeCommentPost_FullMethodName   = "/post.PostService/GetMostlikeCommentPost"
	PostService_StartMessaging_FullMethodName           = "/post.PostService/StartMessaging"
	PostService_SendMessage_FullMethodName              = "/post.PostService/SendMessage"
	PostService_GetChatMessages_FullMethodName          = "/post.PostService/GetChatMessages"
	PostService_MessageMarcTrue_FullMethodName          = "/post.PostService/MessageMarcTrue"
	PostService_GetUserChats_FullMethodName             = "/post.PostService/GetUserChats"
	PostService_GetUnreadMessages_FullMethodName        = "/post.PostService/GetUnreadMessages"
	PostService_UpdateMessage_FullMethodName            = "/post.PostService/UpdateMessage"
	PostService_GetTodayMessages_FullMethodName         = "/post.PostService/GetTodayMessages"
	PostService_DeleteMessage_FullMethodName            = "/post.PostService/DeleteMessage"
	PostService_DeleteChat_FullMethodName               = "/post.PostService/DeleteChat"
)

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	// post
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostResponse, error)
	UpdatePost(ctx context.Context, in *UpdateAPost, opts ...grpc.CallOption) (*PostResponse, error)
	GetPostByID(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*PostResponse, error)
	ListPosts(ctx context.Context, in *PostList, opts ...grpc.CallOption) (*PostListResponse, error)
	DeletePost(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*Message, error)
	AddImageToPost(ctx context.Context, in *ImageUrl, opts ...grpc.CallOption) (*PostResponse, error)
	RemoveImageFromPost(ctx context.Context, in *ImageUrl, opts ...grpc.CallOption) (*Message, error)
	GetPostByCountry(ctx context.Context, in *PostCountry, opts ...grpc.CallOption) (*PostListResponse, error)
	// basic-additional
	GetUserRecommendation(ctx context.Context, in *Username, opts ...grpc.CallOption) (*PostListResponse, error)
	GetPostsByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*PostListResponse, error)
	GetTrendsPost(ctx context.Context, in *Void, opts ...grpc.CallOption) (*PostListResponse, error)
	SearchPost(ctx context.Context, in *Search, opts ...grpc.CallOption) (*PostListResponse, error)
	// like
	AddLikePost(ctx context.Context, in *LikePost, opts ...grpc.CallOption) (*LikeResponse, error)
	DeleteLikePost(ctx context.Context, in *LikePost, opts ...grpc.CallOption) (*Message, error)
	AddLikeComment(ctx context.Context, in *LikeCommit, opts ...grpc.CallOption) (*LikeComResponse, error)
	DeleteLikeComment(ctx context.Context, in *LikeCommit, opts ...grpc.CallOption) (*Message, error)
	GetPostLikeCount(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*LikeCount, error)
	GetMostLikedComment(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*LikeCount, error)
	GetUsersWhichLikePost(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*Users, error)
	GetUsersWhichLikeComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Users, error)
	// comments
	CreateComment(ctx context.Context, in *CommentPost, opts ...grpc.CallOption) (*CommentResponse, error)
	UpdateComment(ctx context.Context, in *UpdateAComment, opts ...grpc.CallOption) (*CommentResponse, error)
	GetCommentByID(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*CommentResponse, error)
	GetCommentByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*CommentResponse, error)
	ListComments(ctx context.Context, in *CommentList, opts ...grpc.CallOption) (*CommentsR, error)
	DeleteComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Message, error)
	GetCommentByPostID(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*CommentsR, error)
	GetAllUserComments(ctx context.Context, in *Username, opts ...grpc.CallOption) (*CommentsR, error)
	GetMostlikeCommentPost(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*CommentResponse, error)
	// chat
	StartMessaging(ctx context.Context, in *CreateChat, opts ...grpc.CallOption) (*ChatResponse, error)
	SendMessage(ctx context.Context, in *CreateMassage, opts ...grpc.CallOption) (*MassageResponse, error)
	GetChatMessages(ctx context.Context, in *List, opts ...grpc.CallOption) (*MassageResponseList, error)
	MessageMarcTrue(ctx context.Context, in *MassageTrue, opts ...grpc.CallOption) (*Message, error)
	GetUserChats(ctx context.Context, in *Username, opts ...grpc.CallOption) (*ChatResponseList, error)
	GetUnreadMessages(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*MassageResponseList, error)
	UpdateMessage(ctx context.Context, in *UpdateMs, opts ...grpc.CallOption) (*MassageResponse, error)
	GetTodayMessages(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*MassageResponseList, error)
	DeleteMessage(ctx context.Context, in *MassageId, opts ...grpc.CallOption) (*Message, error)
	DeleteChat(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*Message, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, PostService_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UpdatePost(ctx context.Context, in *UpdateAPost, opts ...grpc.CallOption) (*PostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, PostService_UpdatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostByID(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*PostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, PostService_GetPostByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ListPosts(ctx context.Context, in *PostList, opts ...grpc.CallOption) (*PostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResponse)
	err := c.cc.Invoke(ctx, PostService_ListPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeletePost(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, PostService_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) AddImageToPost(ctx context.Context, in *ImageUrl, opts ...grpc.CallOption) (*PostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, PostService_AddImageToPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) RemoveImageFromPost(ctx context.Context, in *ImageUrl, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, PostService_RemoveImageFromPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostByCountry(ctx context.Context, in *PostCountry, opts ...grpc.CallOption) (*PostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResponse)
	err := c.cc.Invoke(ctx, PostService_GetPostByCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetUserRecommendation(ctx context.Context, in *Username, opts ...grpc.CallOption) (*PostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResponse)
	err := c.cc.Invoke(ctx, PostService_GetUserRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostsByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*PostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResponse)
	err := c.cc.Invoke(ctx, PostService_GetPostsByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetTrendsPost(ctx context.Context, in *Void, opts ...grpc.CallOption) (*PostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResponse)
	err := c.cc.Invoke(ctx, PostService_GetTrendsPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) SearchPost(ctx context.Context, in *Search, opts ...grpc.CallOption) (*PostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResponse)
	err := c.cc.Invoke(ctx, PostService_SearchPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) AddLikePost(ctx context.Context, in *LikePost, opts ...grpc.CallOption) (*LikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeResponse)
	err := c.cc.Invoke(ctx, PostService_AddLikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeleteLikePost(ctx context.Context, in *LikePost, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, PostService_DeleteLikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) AddLikeComment(ctx context.Context, in *LikeCommit, opts ...grpc.CallOption) (*LikeComResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeComResponse)
	err := c.cc.Invoke(ctx, PostService_AddLikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeleteLikeComment(ctx context.Context, in *LikeCommit, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, PostService_DeleteLikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostLikeCount(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*LikeCount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeCount)
	err := c.cc.Invoke(ctx, PostService_GetPostLikeCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetMostLikedComment(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*LikeCount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeCount)
	err := c.cc.Invoke(ctx, PostService_GetMostLikedComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetUsersWhichLikePost(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*Users, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Users)
	err := c.cc.Invoke(ctx, PostService_GetUsersWhichLikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetUsersWhichLikeComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Users, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Users)
	err := c.cc.Invoke(ctx, PostService_GetUsersWhichLikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CreateComment(ctx context.Context, in *CommentPost, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, PostService_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UpdateComment(ctx context.Context, in *UpdateAComment, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, PostService_UpdateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetCommentByID(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, PostService_GetCommentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetCommentByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, PostService_GetCommentByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ListComments(ctx context.Context, in *CommentList, opts ...grpc.CallOption) (*CommentsR, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentsR)
	err := c.cc.Invoke(ctx, PostService_ListComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeleteComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, PostService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetCommentByPostID(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*CommentsR, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentsR)
	err := c.cc.Invoke(ctx, PostService_GetCommentByPostID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetAllUserComments(ctx context.Context, in *Username, opts ...grpc.CallOption) (*CommentsR, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentsR)
	err := c.cc.Invoke(ctx, PostService_GetAllUserComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetMostlikeCommentPost(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, PostService_GetMostlikeCommentPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) StartMessaging(ctx context.Context, in *CreateChat, opts ...grpc.CallOption) (*ChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, PostService_StartMessaging_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) SendMessage(ctx context.Context, in *CreateMassage, opts ...grpc.CallOption) (*MassageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MassageResponse)
	err := c.cc.Invoke(ctx, PostService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetChatMessages(ctx context.Context, in *List, opts ...grpc.CallOption) (*MassageResponseList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MassageResponseList)
	err := c.cc.Invoke(ctx, PostService_GetChatMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) MessageMarcTrue(ctx context.Context, in *MassageTrue, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, PostService_MessageMarcTrue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetUserChats(ctx context.Context, in *Username, opts ...grpc.CallOption) (*ChatResponseList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatResponseList)
	err := c.cc.Invoke(ctx, PostService_GetUserChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetUnreadMessages(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*MassageResponseList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MassageResponseList)
	err := c.cc.Invoke(ctx, PostService_GetUnreadMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UpdateMessage(ctx context.Context, in *UpdateMs, opts ...grpc.CallOption) (*MassageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MassageResponse)
	err := c.cc.Invoke(ctx, PostService_UpdateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetTodayMessages(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*MassageResponseList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MassageResponseList)
	err := c.cc.Invoke(ctx, PostService_GetTodayMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeleteMessage(ctx context.Context, in *MassageId, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, PostService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeleteChat(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, PostService_DeleteChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility
type PostServiceServer interface {
	// post
	CreatePost(context.Context, *Post) (*PostResponse, error)
	UpdatePost(context.Context, *UpdateAPost) (*PostResponse, error)
	GetPostByID(context.Context, *PostId) (*PostResponse, error)
	ListPosts(context.Context, *PostList) (*PostListResponse, error)
	DeletePost(context.Context, *PostId) (*Message, error)
	AddImageToPost(context.Context, *ImageUrl) (*PostResponse, error)
	RemoveImageFromPost(context.Context, *ImageUrl) (*Message, error)
	GetPostByCountry(context.Context, *PostCountry) (*PostListResponse, error)
	// basic-additional
	GetUserRecommendation(context.Context, *Username) (*PostListResponse, error)
	GetPostsByUsername(context.Context, *Username) (*PostListResponse, error)
	GetTrendsPost(context.Context, *Void) (*PostListResponse, error)
	SearchPost(context.Context, *Search) (*PostListResponse, error)
	// like
	AddLikePost(context.Context, *LikePost) (*LikeResponse, error)
	DeleteLikePost(context.Context, *LikePost) (*Message, error)
	AddLikeComment(context.Context, *LikeCommit) (*LikeComResponse, error)
	DeleteLikeComment(context.Context, *LikeCommit) (*Message, error)
	GetPostLikeCount(context.Context, *PostId) (*LikeCount, error)
	GetMostLikedComment(context.Context, *PostId) (*LikeCount, error)
	GetUsersWhichLikePost(context.Context, *PostId) (*Users, error)
	GetUsersWhichLikeComment(context.Context, *CommentId) (*Users, error)
	// comments
	CreateComment(context.Context, *CommentPost) (*CommentResponse, error)
	UpdateComment(context.Context, *UpdateAComment) (*CommentResponse, error)
	GetCommentByID(context.Context, *CommentId) (*CommentResponse, error)
	GetCommentByUsername(context.Context, *Username) (*CommentResponse, error)
	ListComments(context.Context, *CommentList) (*CommentsR, error)
	DeleteComment(context.Context, *CommentId) (*Message, error)
	GetCommentByPostID(context.Context, *PostId) (*CommentsR, error)
	GetAllUserComments(context.Context, *Username) (*CommentsR, error)
	GetMostlikeCommentPost(context.Context, *PostId) (*CommentResponse, error)
	// chat
	StartMessaging(context.Context, *CreateChat) (*ChatResponse, error)
	SendMessage(context.Context, *CreateMassage) (*MassageResponse, error)
	GetChatMessages(context.Context, *List) (*MassageResponseList, error)
	MessageMarcTrue(context.Context, *MassageTrue) (*Message, error)
	GetUserChats(context.Context, *Username) (*ChatResponseList, error)
	GetUnreadMessages(context.Context, *ChatId) (*MassageResponseList, error)
	UpdateMessage(context.Context, *UpdateMs) (*MassageResponse, error)
	GetTodayMessages(context.Context, *ChatId) (*MassageResponseList, error)
	DeleteMessage(context.Context, *MassageId) (*Message, error)
	DeleteChat(context.Context, *ChatId) (*Message, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (UnimplementedPostServiceServer) CreatePost(context.Context, *Post) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostServiceServer) UpdatePost(context.Context, *UpdateAPost) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostServiceServer) GetPostByID(context.Context, *PostId) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostByID not implemented")
}
func (UnimplementedPostServiceServer) ListPosts(context.Context, *PostList) (*PostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPosts not implemented")
}
func (UnimplementedPostServiceServer) DeletePost(context.Context, *PostId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostServiceServer) AddImageToPost(context.Context, *ImageUrl) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddImageToPost not implemented")
}
func (UnimplementedPostServiceServer) RemoveImageFromPost(context.Context, *ImageUrl) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveImageFromPost not implemented")
}
func (UnimplementedPostServiceServer) GetPostByCountry(context.Context, *PostCountry) (*PostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostByCountry not implemented")
}
func (UnimplementedPostServiceServer) GetUserRecommendation(context.Context, *Username) (*PostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRecommendation not implemented")
}
func (UnimplementedPostServiceServer) GetPostsByUsername(context.Context, *Username) (*PostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsByUsername not implemented")
}
func (UnimplementedPostServiceServer) GetTrendsPost(context.Context, *Void) (*PostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendsPost not implemented")
}
func (UnimplementedPostServiceServer) SearchPost(context.Context, *Search) (*PostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPost not implemented")
}
func (UnimplementedPostServiceServer) AddLikePost(context.Context, *LikePost) (*LikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLikePost not implemented")
}
func (UnimplementedPostServiceServer) DeleteLikePost(context.Context, *LikePost) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLikePost not implemented")
}
func (UnimplementedPostServiceServer) AddLikeComment(context.Context, *LikeCommit) (*LikeComResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLikeComment not implemented")
}
func (UnimplementedPostServiceServer) DeleteLikeComment(context.Context, *LikeCommit) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLikeComment not implemented")
}
func (UnimplementedPostServiceServer) GetPostLikeCount(context.Context, *PostId) (*LikeCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostLikeCount not implemented")
}
func (UnimplementedPostServiceServer) GetMostLikedComment(context.Context, *PostId) (*LikeCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostLikedComment not implemented")
}
func (UnimplementedPostServiceServer) GetUsersWhichLikePost(context.Context, *PostId) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWhichLikePost not implemented")
}
func (UnimplementedPostServiceServer) GetUsersWhichLikeComment(context.Context, *CommentId) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWhichLikeComment not implemented")
}
func (UnimplementedPostServiceServer) CreateComment(context.Context, *CommentPost) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedPostServiceServer) UpdateComment(context.Context, *UpdateAComment) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedPostServiceServer) GetCommentByID(context.Context, *CommentId) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentByID not implemented")
}
func (UnimplementedPostServiceServer) GetCommentByUsername(context.Context, *Username) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentByUsername not implemented")
}
func (UnimplementedPostServiceServer) ListComments(context.Context, *CommentList) (*CommentsR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (UnimplementedPostServiceServer) DeleteComment(context.Context, *CommentId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedPostServiceServer) GetCommentByPostID(context.Context, *PostId) (*CommentsR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentByPostID not implemented")
}
func (UnimplementedPostServiceServer) GetAllUserComments(context.Context, *Username) (*CommentsR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserComments not implemented")
}
func (UnimplementedPostServiceServer) GetMostlikeCommentPost(context.Context, *PostId) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostlikeCommentPost not implemented")
}
func (UnimplementedPostServiceServer) StartMessaging(context.Context, *CreateChat) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMessaging not implemented")
}
func (UnimplementedPostServiceServer) SendMessage(context.Context, *CreateMassage) (*MassageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedPostServiceServer) GetChatMessages(context.Context, *List) (*MassageResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}
func (UnimplementedPostServiceServer) MessageMarcTrue(context.Context, *MassageTrue) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageMarcTrue not implemented")
}
func (UnimplementedPostServiceServer) GetUserChats(context.Context, *Username) (*ChatResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChats not implemented")
}
func (UnimplementedPostServiceServer) GetUnreadMessages(context.Context, *ChatId) (*MassageResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreadMessages not implemented")
}
func (UnimplementedPostServiceServer) UpdateMessage(context.Context, *UpdateMs) (*MassageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedPostServiceServer) GetTodayMessages(context.Context, *ChatId) (*MassageResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodayMessages not implemented")
}
func (UnimplementedPostServiceServer) DeleteMessage(context.Context, *MassageId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedPostServiceServer) DeleteChat(context.Context, *ChatId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UpdatePost(ctx, req.(*UpdateAPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPostByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostByID(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ListPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ListPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_ListPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ListPosts(ctx, req.(*PostList))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeletePost(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_AddImageToPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).AddImageToPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_AddImageToPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).AddImageToPost(ctx, req.(*ImageUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_RemoveImageFromPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).RemoveImageFromPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_RemoveImageFromPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).RemoveImageFromPost(ctx, req.(*ImageUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCountry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPostByCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostByCountry(ctx, req.(*PostCountry))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetUserRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetUserRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetUserRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetUserRecommendation(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostsByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostsByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPostsByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostsByUsername(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetTrendsPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetTrendsPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetTrendsPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetTrendsPost(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_SearchPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).SearchPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_SearchPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).SearchPost(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_AddLikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).AddLikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_AddLikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).AddLikePost(ctx, req.(*LikePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeleteLikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeleteLikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeleteLikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeleteLikePost(ctx, req.(*LikePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_AddLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).AddLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_AddLikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).AddLikeComment(ctx, req.(*LikeCommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeleteLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeleteLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeleteLikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeleteLikeComment(ctx, req.(*LikeCommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostLikeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostLikeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPostLikeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostLikeCount(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetMostLikedComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetMostLikedComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetMostLikedComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetMostLikedComment(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetUsersWhichLikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetUsersWhichLikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetUsersWhichLikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetUsersWhichLikePost(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetUsersWhichLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetUsersWhichLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetUsersWhichLikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetUsersWhichLikeComment(ctx, req.(*CommentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreateComment(ctx, req.(*CommentPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UpdateComment(ctx, req.(*UpdateAComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetCommentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetCommentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetCommentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetCommentByID(ctx, req.(*CommentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetCommentByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetCommentByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetCommentByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetCommentByUsername(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_ListComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ListComments(ctx, req.(*CommentList))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeleteComment(ctx, req.(*CommentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetCommentByPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetCommentByPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetCommentByPostID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetCommentByPostID(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetAllUserComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetAllUserComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetAllUserComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetAllUserComments(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetMostlikeCommentPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetMostlikeCommentPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetMostlikeCommentPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetMostlikeCommentPost(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_StartMessaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).StartMessaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_StartMessaging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).StartMessaging(ctx, req.(*CreateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMassage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).SendMessage(ctx, req.(*CreateMassage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetChatMessages(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_MessageMarcTrue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MassageTrue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).MessageMarcTrue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_MessageMarcTrue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).MessageMarcTrue(ctx, req.(*MassageTrue))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetUserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetUserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetUserChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetUserChats(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetUnreadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetUnreadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetUnreadMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetUnreadMessages(ctx, req.(*ChatId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UpdateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UpdateMessage(ctx, req.(*UpdateMs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetTodayMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetTodayMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetTodayMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetTodayMessages(ctx, req.(*ChatId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MassageId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeleteMessage(ctx, req.(*MassageId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeleteChat(ctx, req.(*ChatId))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostService_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostService_UpdatePost_Handler,
		},
		{
			MethodName: "GetPostByID",
			Handler:    _PostService_GetPostByID_Handler,
		},
		{
			MethodName: "ListPosts",
			Handler:    _PostService_ListPosts_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostService_DeletePost_Handler,
		},
		{
			MethodName: "AddImageToPost",
			Handler:    _PostService_AddImageToPost_Handler,
		},
		{
			MethodName: "RemoveImageFromPost",
			Handler:    _PostService_RemoveImageFromPost_Handler,
		},
		{
			MethodName: "GetPostByCountry",
			Handler:    _PostService_GetPostByCountry_Handler,
		},
		{
			MethodName: "GetUserRecommendation",
			Handler:    _PostService_GetUserRecommendation_Handler,
		},
		{
			MethodName: "GetPostsByUsername",
			Handler:    _PostService_GetPostsByUsername_Handler,
		},
		{
			MethodName: "GetTrendsPost",
			Handler:    _PostService_GetTrendsPost_Handler,
		},
		{
			MethodName: "SearchPost",
			Handler:    _PostService_SearchPost_Handler,
		},
		{
			MethodName: "AddLikePost",
			Handler:    _PostService_AddLikePost_Handler,
		},
		{
			MethodName: "DeleteLikePost",
			Handler:    _PostService_DeleteLikePost_Handler,
		},
		{
			MethodName: "AddLikeComment",
			Handler:    _PostService_AddLikeComment_Handler,
		},
		{
			MethodName: "DeleteLikeComment",
			Handler:    _PostService_DeleteLikeComment_Handler,
		},
		{
			MethodName: "GetPostLikeCount",
			Handler:    _PostService_GetPostLikeCount_Handler,
		},
		{
			MethodName: "GetMostLikedComment",
			Handler:    _PostService_GetMostLikedComment_Handler,
		},
		{
			MethodName: "GetUsersWhichLikePost",
			Handler:    _PostService_GetUsersWhichLikePost_Handler,
		},
		{
			MethodName: "GetUsersWhichLikeComment",
			Handler:    _PostService_GetUsersWhichLikeComment_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _PostService_CreateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _PostService_UpdateComment_Handler,
		},
		{
			MethodName: "GetCommentByID",
			Handler:    _PostService_GetCommentByID_Handler,
		},
		{
			MethodName: "GetCommentByUsername",
			Handler:    _PostService_GetCommentByUsername_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _PostService_ListComments_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _PostService_DeleteComment_Handler,
		},
		{
			MethodName: "GetCommentByPostID",
			Handler:    _PostService_GetCommentByPostID_Handler,
		},
		{
			MethodName: "GetAllUserComments",
			Handler:    _PostService_GetAllUserComments_Handler,
		},
		{
			MethodName: "GetMostlikeCommentPost",
			Handler:    _PostService_GetMostlikeCommentPost_Handler,
		},
		{
			MethodName: "StartMessaging",
			Handler:    _PostService_StartMessaging_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _PostService_SendMessage_Handler,
		},
		{
			MethodName: "GetChatMessages",
			Handler:    _PostService_GetChatMessages_Handler,
		},
		{
			MethodName: "MessageMarcTrue",
			Handler:    _PostService_MessageMarcTrue_Handler,
		},
		{
			MethodName: "GetUserChats",
			Handler:    _PostService_GetUserChats_Handler,
		},
		{
			MethodName: "GetUnreadMessages",
			Handler:    _PostService_GetUnreadMessages_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _PostService_UpdateMessage_Handler,
		},
		{
			MethodName: "GetTodayMessages",
			Handler:    _PostService_GetTodayMessages_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _PostService_DeleteMessage_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _PostService_DeleteChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post/post.proto",
}
